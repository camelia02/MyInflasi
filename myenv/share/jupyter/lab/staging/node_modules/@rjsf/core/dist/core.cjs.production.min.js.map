{"version":3,"file":"core.cjs.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/getDefaultRegistry.ts","../src/components/fields/index.ts","../src/components/templates/index.ts","../src/components/templates/ButtonTemplates/index.ts","../src/components/widgets/index.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import { Component, MouseEvent } from 'react';\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UiSchema,\n  ITEMS_KEY,\n} from '@rjsf/utils';\nimport get from 'lodash/get';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport { nanoid } from 'nanoid';\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T[], S, F>,\n  ArrayFieldState<T>\n> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData) ? nextProps.formData : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema, registry } = this.props;\n    const { translateString } = registry;\n    return get(\n      schema,\n      [ITEMS_KEY, 'title'],\n      get(schema, [ITEMS_KEY, 'description'], translateString(TranslatableString.ArrayItemTitle))\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes('null');\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== 'null';\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n   *\n   * @param event - The event for the click\n   * @param [index] - The optional index at which to add the new data\n   */\n  _handleAddClick(event: MouseEvent, index?: number) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData];\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  }\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    this._handleAddClick(event);\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      this._handleAddClick(event, index);\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () => onChange(keyedToPlainFormData(newKeyedFormData), newErrorSchema as ErrorSchema<T[]>)\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === 'undefined' ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils, translateString } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T[], S, F>(\n        'UnsupportedFieldTemplate',\n        registry,\n        uiOptions\n      );\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason={translateString(TranslatableString.MissingItems)}\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = '_',\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items) ? (schema.items as S) : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const canAdd = this.canAddItem(formData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = 'select', ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = 'files', ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema.$id}\n        name={name}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=''\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = '_',\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items) ? (schema.items as S[]) : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const canAdd = this.canAddItem(items) && !!additionalSchema;\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      className: 'field field-array field-array-fixed-items',\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(itemSchema, itemIdPrefix, itemCast, idPrefix, idSeparator);\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema ? (errorSchema[index] as ErrorSchema<T[]>) : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<'ArrayFieldTemplate', T[], S, F>('ArrayFieldTemplate', registry, uiOptions);\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canAdd: boolean;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>['onBlur'];\n    onFocus: FieldProps<T[], S, F>['onFocus'];\n    rawErrors?: string[];\n    totalItems: number;\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canAdd,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n      totalItems,\n    } = props;\n    const { disabled, hideError, idPrefix, idSeparator, readonly, uiSchema, registry, formContext } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], S, F>(uiSchema);\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: 'array-item',\n      disabled,\n      canAdd,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      totalItems,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext, translateString } = registry;\n  const { widget = 'checkbox', ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n  const yes = translateString(TranslatableString.YesLabel);\n  const no = translateString(TranslatableString.NoLabel);\n\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? yes : no),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (!schemaWithEnumNames.enumNames && enums.length === 2 && enums.every((v: any) => typeof v === 'boolean')) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? yes : no,\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? yes : no,\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import { Component } from 'react';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport {\n  deepEquals,\n  ERRORS_KEY,\n  FieldProps,\n  FormContextType,\n  getUiOptions,\n  getWidget,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState<S extends StrictRJSFSchema = RJSFSchema> = {\n  /** The currently selected option */\n  selectedOption: number;\n  /* The option schemas after retrieving all $refs */\n  retrievedOptions: S[];\n};\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  AnyOfFieldState<S>\n> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const {\n      formData,\n      options,\n      registry: { schemaUtils },\n    } = this.props;\n    // cache the retrieved options in state in case they have $refs to save doing it later\n    const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n\n    this.state = {\n      retrievedOptions,\n      selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n    };\n  }\n\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(prevProps: Readonly<FieldProps<T, S, F>>, prevState: Readonly<AnyOfFieldState>) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    let newState = this.state;\n    if (!deepEquals(prevProps.options, options)) {\n      const {\n        registry: { schemaUtils },\n      } = this.props;\n      // re-cache the retrieved options in state in case they have $refs to save doing it later\n      const retrievedOptions = options.map((opt: S) => schemaUtils.retrieveSchema(opt, formData));\n      newState = { selectedOption, retrievedOptions };\n    }\n    if (!deepEquals(formData, prevProps.formData) && idSchema.$id === prevProps.idSchema.$id) {\n      const { retrievedOptions } = newState;\n      const matchingOption = this.getMatchingOption(selectedOption, formData, retrievedOptions);\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = { selectedOption: matchingOption, retrievedOptions };\n      }\n    }\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(selectedOption: number, formData: T | undefined, options: S[]) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getClosestMatchingOption(formData, options, selectedOption);\n    if (option > 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option - The new option value being selected\n   */\n  onOptionChange = (option?: string) => {\n    const { selectedOption, retrievedOptions } = this.state;\n    const { formData, onChange, registry } = this.props;\n    const { schemaUtils } = registry;\n    const intOption = option !== undefined ? parseInt(option, 10) : -1;\n    if (intOption === selectedOption) {\n      return;\n    }\n    const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n    const oldOption = selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n\n    let newFormData = schemaUtils.sanitizeDataForNewSchema(newOption, oldOption, formData);\n    if (newFormData && newOption) {\n      // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n      // so that only the root objects themselves are created without adding undefined children properties\n      newFormData = schemaUtils.getDefaultFormState(newOption, newFormData, 'excludeObjectChildren') as T;\n    }\n    onChange(newFormData, undefined, this.getFieldId());\n\n    this.setState({ selectedOption: intOption });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      name,\n      baseType,\n      disabled = false,\n      errorSchema = {},\n      formContext,\n      onBlur,\n      onFocus,\n      registry,\n      schema,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields, translateString } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption, retrievedOptions } = this.state;\n    const {\n      widget = 'select',\n      placeholder,\n      autofocus,\n      autocomplete,\n      title = schema.title,\n      ...uiOptions\n    } = getUiOptions<T, S, F>(uiSchema);\n    const Widget = getWidget<T, S, F>({ type: 'number' }, widget, widgets);\n    const rawErrors = get(errorSchema, ERRORS_KEY, []);\n    const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n\n    const option = selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    let optionSchema: S;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type ? option : Object.assign({}, option, { type: baseType });\n    }\n\n    const translateEnum: TranslatableString = title\n      ? TranslatableString.TitleOptionPrefix\n      : TranslatableString.OptionPrefix;\n    const translateParams = title ? [title] : [];\n    const enumOptions = retrievedOptions.map((opt: { title?: string }, index: number) => ({\n      label: opt.title || translateString(translateEnum, translateParams.concat(String(index + 1))),\n      value: index,\n    }));\n\n    return (\n      <div className='panel panel-default panel-body'>\n        <div className='form-group'>\n          <Widget\n            id={this.getFieldId()}\n            name={`${name}${schema.oneOf ? '__oneof_select' : '__anyof_select'}`}\n            schema={{ type: 'number', default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            disabled={disabled || isEmpty(enumOptions)}\n            multiple={false}\n            rawErrors={rawErrors}\n            errorSchema={fieldErrorSchema}\n            value={selectedOption >= 0 ? selectedOption : undefined}\n            options={{ enumOptions, ...uiOptions }}\n            registry={registry}\n            formContext={formContext}\n            placeholder={placeholder}\n            autocomplete={autocomplete}\n            autofocus={autofocus}\n            label=''\n          />\n        </div>\n        {option !== null && <_SchemaField {...this.props} schema={optionSchema!} />}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import { useState, useCallback } from 'react';\nimport { asNumber, FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>['value']) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === '.') {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === 'string' && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, ''))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === 'string' && typeof value === 'number') {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace('.', '\\\\.') + '\\\\.?0*$');\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import { Component } from 'react';\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n  ANY_OF_KEY,\n  ONE_OF_KEY,\n} from '@rjsf/utils';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isObject from 'lodash/isObject';\nimport set from 'lodash/set';\nimport unset from 'lodash/unset';\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>,\n  ObjectFieldState\n> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return Array.isArray(schema.required) && schema.required.indexOf(name) !== -1;\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (value: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = '' as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value } as unknown as T;\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData } as T;\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param [formData] - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData?: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = '-' } = getUiOptions<T, S, F>(uiSchema);\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (has(formData, newKey)) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema['type']) {\n    const {\n      registry: { translateString },\n    } = this.props;\n    switch (type) {\n      case 'array':\n        return [];\n      case 'boolean':\n        return false;\n      case 'null':\n        return null;\n      case 'number':\n        return 0;\n      case 'object':\n        return {};\n      case 'string':\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return translateString(TranslatableString.NewStringDefault);\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData } as T;\n\n    let type: RJSFSchema['type'] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      let apSchema = schema.additionalProperties;\n      if (REF_KEY in apSchema) {\n        const { schemaUtils } = registry;\n        apSchema = schemaUtils.retrieveSchema({ $ref: apSchema[REF_KEY] } as S, formData);\n        type = apSchema.type;\n      }\n      if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n        type = 'object';\n      }\n    }\n\n    const newKey = this.getAvailableKey('newKey', newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className='config-error' style={{ color: 'red' }}>\n            Invalid {name || 'root'} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<'ObjectFieldTemplate', T, S, F>('ObjectFieldTemplate', registry, uiOptions);\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [PROPERTIES_KEY, name, ADDITIONAL_PROPERTY_FLAG]);\n        const fieldUiSchema = addedByAdditionalProperties ? uiSchema.additionalProperties : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === 'hidden';\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(name, addedByAdditionalProperties)}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import { useCallback, Component } from 'react';\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  deepEquals,\n  descriptionId,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  getSchemaType,\n  getTemplate,\n  getUiOptions,\n  ID_KEY,\n  IdSchema,\n  mergeObjects,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  UI_OPTIONS_KEY,\n  UIOptionsType,\n} from '@rjsf/utils';\nimport isObject from 'lodash/isObject';\nimport omit from 'lodash/omit';\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: 'ArrayField',\n  boolean: 'BooleanField',\n  integer: 'NumberField',\n  number: 'NumberField',\n  object: 'ObjectField',\n  string: 'StringField',\n  null: 'NullField',\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields, translateString } = registry;\n  if (typeof field === 'function') {\n    return field;\n  }\n  if (typeof field === 'string' && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType) ? schemaType[0] : schemaType || '';\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<'UnsupportedFieldTemplate', T, S, F>(\n          'UnsupportedFieldTemplate',\n          registry,\n          uiOptions\n        );\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={translateString(TranslatableString.UnknownFieldType, [String(schema.type)])}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const FieldTemplate = getTemplate<'FieldTemplate', T, S, F>('FieldTemplate', registry, uiOptions);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    uiOptions\n  );\n  const FieldHelpTemplate = getTemplate<'FieldHelpTemplate', T, S, F>('FieldHelpTemplate', registry, uiOptions);\n  const FieldErrorTemplate = getTemplate<'FieldErrorTemplate', T, S, F>('FieldErrorTemplate', registry, uiOptions);\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = useCallback(\n    (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(schema, uiOptions, idSchema, registry);\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(props.readonly || uiOptions.readonly || props.schema.readOnly || schema.readOnly);\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError = uiSchemaHideError === undefined ? props.hideError : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names or style to child components\n  const fieldUiSchema = omit(uiSchema, ['ui:classNames', 'classNames', 'ui:style']);\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], ['classNames', 'style']);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label = ADDITIONAL_PROPERTY_FLAG in schema ? name : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description = uiOptions.description || props.schema.description || schema.description || '';\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === 'hidden';\n\n  const classNames = ['form-group', 'field', `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push('field-error has-error has-danger');\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, 'children'> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={descriptionId<T>(id)}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === 'string' ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(' ').trim(),\n    style: uiOptions.style,\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n  const isReplacingAnyOrOneOf = uiSchema?.['ui:field'] && uiSchema?.['ui:fieldReplacesAnyOrOneOf'] === true;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_AnyOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.anyOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n        {schema.oneOf && !isReplacingAnyOrOneOf && !schemaUtils.isSelect(schema) && (\n          <_OneOfField\n            name={name}\n            disabled={disabled}\n            readonly={readonly}\n            hideError={hideError}\n            errorSchema={errorSchema}\n            formData={formData}\n            formContext={formContext}\n            idPrefix={idPrefix}\n            idSchema={idSchema}\n            idSeparator={idSeparator}\n            onBlur={props.onBlur}\n            onChange={props.onChange}\n            onFocus={props.onFocus}\n            options={schema.oneOf.map((_schema) =>\n              schemaUtils.retrieveSchema(isObject(_schema) ? (_schema as S) : ({} as S), formData)\n            )}\n            baseType={schema.type}\n            registry={registry}\n            schema={schema}\n            uiSchema={uiSchema}\n          />\n        )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> extends Component<\n  FieldProps<T, S, F>\n> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema) ? optionsList(schema) : undefined;\n  let defaultWidget = enumOptions ? 'select' : 'text';\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const { widget = defaultWidget, placeholder = '', ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      name={name}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from 'react';\nimport { FieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: FieldProps<T, S, F>\n) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { CSSProperties } from 'react';\nimport { ArrayFieldTemplateItemType, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } = registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: 'bold',\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? 'col-xs-9' : 'col-xs-12'}>{children}</div>\n      {hasToolbar && (\n        <div className='col-xs-3 array-item-toolbox'>\n          <div\n            className='btn-group'\n            style={{\n              display: 'flex',\n              justifyContent: 'space-around',\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<'ArrayFieldDescriptionTemplate', T, S, F>(\n    'ArrayFieldDescriptionTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldItemTemplate = getTemplate<'ArrayFieldItemTemplate', T, S, F>(\n    'ArrayFieldItemTemplate',\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<'ArrayFieldTitleTemplate', T, S, F>(\n    'ArrayFieldTitleTemplate',\n    registry,\n    uiOptions\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className='row array-item-list'>\n        {items &&\n          items.map(({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n            <ArrayFieldItemTemplate key={key} {...itemProps} />\n          ))}\n      </div>\n      {canAdd && (\n        <AddButton\n          className='array-item-add'\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import {\n  getTemplate,\n  getUiOptions,\n  titleId,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from '@rjsf/utils';\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>['TitleFieldTemplate'] = getTemplate<'TitleFieldTemplate', T, S, F>(\n    'TitleFieldTemplate',\n    registry,\n    options\n  );\n  return (\n    <TitleFieldTemplate\n      id={titleId<T>(idSchema)}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  BaseInputTemplateProps,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: BaseInputTemplateProps<T, S, F>) {\n  const {\n    id,\n    name, // remove this from ...rest\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    onChangeOverride,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === 'number' || inputProps.type === 'integer') {\n    inputValue = value || value === 0 ? value : '';\n  } else {\n    inputValue = value == null ? '' : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLInputElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(({ target: { value } }: FocusEvent<HTMLInputElement>) => onBlur(id, value), [onBlur, id]);\n  const _onFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) => onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className='form-control'\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={onChangeOverride || _onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(schema.default && !schema.examples.includes(schema.default) ? ([schema.default] as string[]) : [])\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import { getSubmitButtonOptions, FormContextType, RJSFSchema, StrictRJSFSchema, SubmitButtonProps } from '@rjsf/utils';\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const { submitText, norender, props: submitButtonProps = {} } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button type='submit' {...submitButtonProps} className={`btn btn-info ${submitButtonProps.className}`}>\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nexport default function IconButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const { iconType = 'default', icon, className, uiSchema, registry, ...otherProps } = props;\n  return (\n    <button type='button' className={`btn btn-${iconType} ${className}`} {...otherProps}>\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveDownButton)}\n      className='array-item-move-down'\n      {...props}\n      icon='arrow-down'\n    />\n  );\n}\n\nexport function MoveUpButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.MoveUpButton)}\n      className='array-item-move-up'\n      {...props}\n      icon='arrow-up'\n    />\n  );\n}\n\nexport function RemoveButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: IconButtonProps<T, S, F>\n) {\n  const {\n    registry: { translateString },\n  } = props;\n  return (\n    <IconButton\n      title={translateString(TranslatableString.RemoveButton)}\n      className='array-item-remove'\n      {...props}\n      iconType='danger'\n      icon='remove'\n    />\n  );\n}\n","import { FormContextType, IconButtonProps, RJSFSchema, StrictRJSFSchema, TranslatableString } from '@rjsf/utils';\n\nimport IconButton from './IconButton';\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  className,\n  onClick,\n  disabled,\n  registry,\n}: IconButtonProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='row'>\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType='info'\n          icon='plus'\n          className='btn-add col-xs-12'\n          title={translateString(TranslatableString.AddButton)}\n          onClick={onClick}\n          disabled={disabled}\n          registry={registry}\n        />\n      </p>\n    </div>\n  );\n}\n","import { DescriptionFieldProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === 'string') {\n    return (\n      <p id={id} className='field-description'>\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className='field-description'>\n        {description}\n      </div>\n    );\n  }\n}\n","import {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n} from '@rjsf/utils';\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  errors,\n  registry,\n}: ErrorListProps<T, S, F>) {\n  const { translateString } = registry;\n  return (\n    <div className='panel panel-danger errors'>\n      <div className='panel-heading'>\n        <h3 className='panel-title'>{translateString(TranslatableString.ErrorsLabel)}</h3>\n      </div>\n      <ul className='list-group'>\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className='list-group-item text-danger'>\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","const REQUIRED_FIELD_SYMBOL = '*';\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className='control-label' htmlFor={id}>\n      {label}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from '@rjsf/utils';\n\nimport Label from './Label';\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const { id, label, children, errors, help, description, hidden, required, displayLabel, registry, uiSchema } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<'WrapIfAdditionalTemplate', T, S, F>(\n    'WrapIfAdditionalTemplate',\n    registry,\n    uiOptions\n  );\n  if (hidden) {\n    return <div className='hidden'>{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import { errorId, FieldErrorProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div>\n      <ul id={id} className='error-detail bs-callout bs-callout-info'>\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className='text-danger' key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import { helpId, FieldHelpProps, FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  if (typeof help === 'string') {\n    return (\n      <p id={id} className='help-block'>\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className='help-block'>\n      {help}\n    </div>\n  );\n}\n","import {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from '@rjsf/utils';\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<'TitleFieldTemplate', T, S, F>('TitleFieldTemplate', registry, options);\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <AddButton\n          className='object-property-expand'\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import { FormContextType, TitleFieldProps, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nconst REQUIRED_FIELD_SYMBOL = '*';\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: TitleFieldProps<T, S, F>\n) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className='required'>{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TranslatableString, UnsupportedFieldProps } from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: UnsupportedFieldProps<T, S, F>\n) {\n  const { schema, idSchema, reason, registry } = props;\n  const { translateString } = registry;\n  let translateEnum: TranslatableString = TranslatableString.UnsupportedField;\n  const translateParams: string[] = [];\n  if (idSchema && idSchema.$id) {\n    translateEnum = TranslatableString.UnsupportedFieldWithId;\n    translateParams.push(idSchema.$id);\n  }\n  if (reason) {\n    translateEnum =\n      translateEnum === TranslatableString.UnsupportedField\n        ? TranslatableString.UnsupportedFieldWithReason\n        : TranslatableString.UnsupportedFieldWithIdAndReason;\n    translateParams.push(reason);\n  }\n  return (\n    <div className='unsupported-field'>\n      <p>\n        <Markdown>{translateString(translateEnum, translateParams)}</Markdown>\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WrapIfAdditionalTemplateProps,\n} from '@rjsf/utils';\n\nimport Label from './FieldTemplate/Label';\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    style,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  const { templates, translateString } = registry;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = templates.ButtonTemplates;\n  const keyLabel = translateString(TranslatableString.KeyLabel, [label]);\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <div className='row'>\n        <div className='col-xs-5 form-additional'>\n          <div className='form-group'>\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className='form-control'\n              type='text'\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className='form-additional form-group col-xs-5'>{children}</div>\n        <div className='col-xs-2'>\n          <RemoveButton\n            className='array-item-remove btn-block'\n            style={{ border: '0' }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n            registry={registry}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { MouseEvent, useCallback, useEffect, useReducer } from 'react';\nimport {\n  ariaDescribedByIds,\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: 'year',\n      range: yearsRange,\n      value: year,\n    },\n    { type: 'month', range: [1, 12], value: month },\n    { type: 'day', range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: 'hour', range: [0, 23], value: hour },\n      { type: 'minute', range: [0, 59], value: minute },\n      { type: 'second', range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  WidgetProps<T, S, F>,\n  'value' | 'name' | 'disabled' | 'readonly' | 'autofocus' | 'registry' | 'onBlur' | 'onFocus'\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  name,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + '_' + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: 'integer' } as S}\n      id={id}\n      name={name}\n      className='form-control'\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=''\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  name,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const { translateString } = registry;\n  const [state, setState] = useReducer((state: DateObject, action: Partial<DateObject>) => {\n    return { ...state, ...action };\n  }, parseDateString(value, time));\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback((property: keyof DateObject, value: string) => {\n    setState({ [property]: value });\n  }, []);\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString('', time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className='list-inline'>\n      {dateElementProps(state, time, options.yearsRange as [number, number] | undefined).map((elemProps, i) => (\n        <li className='list-inline-item' key={i}>\n          <DateElement\n            rootId={id}\n            name={name}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== 'undefined' ? !options.hideNowButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-info btn-now' onClick={handleSetNow}>\n            {translateString(TranslatableString.NowLabel)}\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== 'undefined' ? !options.hideClearButton : true) && (\n        <li className='list-inline-item'>\n          <a href='#' className='btn btn-warning btn-clear' onClick={handleClear}>\n            {translateString(TranslatableString.ClearLabel)}\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  time = true,\n  ...props\n}: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<'DescriptionFieldTemplate', T, S, F>(\n    'DescriptionFieldTemplate',\n    registry,\n    options\n  );\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLInputElement>) => onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? 'disabled' : ''}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type='checkbox'\n          id={id}\n          name={id}\n          checked={typeof value === 'undefined' ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from '@rjsf/utils';\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className='checkboxes' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(option.value, checkboxesValues);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions));\n            } else {\n              onChange(enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions));\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type='checkbox'\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='color' {...props} disabled={disabled || readonly} />;\n}\n","import { useCallback } from 'react';\nimport { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const handleChange = useCallback((value: any) => onChange(value || undefined), [onChange]);\n\n  return <BaseInputTemplate type='date' {...props} onChange={handleChange} />;\n}\n","import {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return (\n    <BaseInputTemplate\n      type='datetime-local'\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='email' {...props} />;\n}\n","import { ChangeEvent, useCallback, useMemo, useState } from 'react';\nimport {\n  dataURItoBlob,\n  getTemplate,\n  FormContextType,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TranslatableString,\n  WidgetProps,\n} from '@rjsf/utils';\nimport Markdown from 'markdown-to-jsx';\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(';base64', `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === 'string') {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  filesInfo,\n  registry,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n  registry: Registry<T, S, F>;\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  const { translateString } = registry;\n  return (\n    <ul className='file-info'>\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <Markdown>{translateString(TranslatableString.FilesInfo, [name, type, String(size)])}</Markdown>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => dataURL)\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { disabled, readonly, multiple, onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  const extractedFilesInfo = useMemo(\n    () => (Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value])),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] = useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <BaseInputTemplate\n        {...props}\n        disabled={disabled || readonly}\n        type='file'\n        onChangeOverride={handleChange}\n        value=''\n        accept={options.accept ? String(options.accept) : undefined}\n      />\n      <FilesInfo<T, S, F> filesInfo={filesInfo} registry={registry} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  value,\n}: WidgetProps<T, S, F>) {\n  return <input type='hidden' id={id} name={id} value={typeof value === 'undefined' ? '' : value} />;\n}\n\nexport default HiddenWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='password' {...props} />;\n}\n","import { FocusEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className='field-radio-group' id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled = Array.isArray(enumDisabled) && enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls = disabled || itemDisabled || readonly ? 'disabled' : '';\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type='radio'\n                id={optionId(id, i)}\n                checked={checked}\n                name={name}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className='field-range-wrapper'>\n      <BaseInputTemplate type='range' {...props} />\n      <span className='range-view'>{value}</span>\n    </div>\n  );\n}\n","import { ChangeEvent, FocusEvent, SyntheticEvent, useCallback } from 'react';\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from '@rjsf/utils';\n\nfunction getValue(event: SyntheticEvent<HTMLSelectElement>, multiple: boolean) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : '';\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(id, enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal));\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(value, enumOptions, multiple);\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className='form-control'\n      value={typeof selectedIndexes === 'undefined' ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {!multiple && schema.default === undefined && <option value=''>{placeholder}</option>}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import { ChangeEvent, FocusEvent, useCallback } from 'react';\nimport { ariaDescribedByIds, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLTextAreaElement>) => onChange(value === '' ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) => onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className='form-control'\n      value={value ? value : ''}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate {...props} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='url' {...props} />;\n}\n","import { getTemplate, FormContextType, RJSFSchema, StrictRJSFSchema, WidgetProps } from '@rjsf/utils';\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  props: WidgetProps<T, S, F>\n) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<'BaseInputTemplate', T, S, F>('BaseInputTemplate', registry, options);\n  return <BaseInputTemplate type='number' {...props} />;\n}\n","import { englishStringTranslator, FormContextType, Registry, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport fields from './components/fields';\nimport templates from './components/templates';\nimport widgets from './components/widgets';\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, 'schemaUtils'> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n    translateString: englishStringTranslator,\n  };\n}\n","import { Field, FormContextType, RegistryFieldsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport ArrayField from './ArrayField';\nimport BooleanField from './BooleanField';\nimport MultiSchemaField from './MultiSchemaField';\nimport NumberField from './NumberField';\nimport ObjectField from './ObjectField';\nimport SchemaField from './SchemaField';\nimport StringField from './StringField';\nimport NullField from './NullField';\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport ArrayFieldDescriptionTemplate from './ArrayFieldDescriptionTemplate';\nimport ArrayFieldItemTemplate from './ArrayFieldItemTemplate';\nimport ArrayFieldTemplate from './ArrayFieldTemplate';\nimport ArrayFieldTitleTemplate from './ArrayFieldTitleTemplate';\nimport BaseInputTemplate from './BaseInputTemplate';\nimport ButtonTemplates from './ButtonTemplates';\nimport DescriptionField from './DescriptionField';\nimport ErrorList from './ErrorList';\nimport FieldTemplate from './FieldTemplate';\nimport FieldErrorTemplate from './FieldErrorTemplate';\nimport FieldHelpTemplate from './FieldHelpTemplate';\nimport ObjectFieldTemplate from './ObjectFieldTemplate';\nimport TitleField from './TitleField';\nimport UnsupportedField from './UnsupportedField';\nimport WrapIfAdditionalTemplate from './WrapIfAdditionalTemplate';\n\nfunction templates<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(): TemplatesType<\n  T,\n  S,\n  F\n> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import { FormContextType, RJSFSchema, StrictRJSFSchema, TemplatesType } from '@rjsf/utils';\n\nimport SubmitButton from './SubmitButton';\nimport AddButton from './AddButton';\nimport { RemoveButton, MoveDownButton, MoveUpButton } from './IconButton';\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>['ButtonTemplates'] {\n  return {\n    SubmitButton,\n    AddButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import { FormContextType, RegistryWidgetsType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\nimport AltDateWidget from './AltDateWidget';\nimport AltDateTimeWidget from './AltDateTimeWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport CheckboxesWidget from './CheckboxesWidget';\nimport ColorWidget from './ColorWidget';\nimport DateWidget from './DateWidget';\nimport DateTimeWidget from './DateTimeWidget';\nimport EmailWidget from './EmailWidget';\nimport FileWidget from './FileWidget';\nimport HiddenWidget from './HiddenWidget';\nimport PasswordWidget from './PasswordWidget';\nimport RadioWidget from './RadioWidget';\nimport RangeWidget from './RangeWidget';\nimport SelectWidget from './SelectWidget';\nimport TextareaWidget from './TextareaWidget';\nimport TextWidget from './TextWidget';\nimport URLWidget from './URLWidget';\nimport UpDownWidget from './UpDownWidget';\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    PasswordWidget,\n    RadioWidget,\n    UpDownWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    DateWidget,\n    DateTimeWidget,\n    AltDateWidget,\n    AltDateTimeWidget,\n    EmailWidget,\n    URLWidget,\n    TextareaWidget,\n    HiddenWidget,\n    ColorWidget,\n    FileWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n  };\n}\n\nexport default widgets;\n","import { Component, ElementType, FormEvent, ReactNode, Ref, RefObject, createRef } from 'react';\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from '@rjsf/utils';\nimport _get from 'lodash/get';\nimport _isEmpty from 'lodash/isEmpty';\nimport _pick from 'lodash/pick';\nimport _toPath from 'lodash/toPath';\n\nimport getDefaultRegistry from '../getDefaultRegistry';\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S, F>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, 'ButtonTemplates'>> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>['ButtonTemplates']>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T, S, F>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | 'top' | 'bottom';\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer<T, S, F>;\n  /** If set to true, then the first field with an error will receive the focus when the form is submitted with errors\n   */\n  focusOnFirstError?: boolean;\n  /** Optional string translation function, if provided, allows users to change the translation of the RJSF internal\n   * strings. Some strings contain replaceable parameter values as indicated by `%1`, `%2`, etc. The number after the\n   * `%` indicates the order of the parameter. The ordering of parameters is important because some languages may choose\n   * to put the second parameter before the first in its translation.\n   */\n  translateString?: Registry['translateString'];\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: ElementType;\n  /** Support receiving a React ref to the Form\n   */\n  ref?: Ref<Form<T, S, F>>;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData?: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>\n  extends Omit<FormState<T, S, F>, 'schemaValidationErrors' | 'schemaValidationErrorSchema'> {\n  /** The status of the form when submitted */\n  status?: 'submitted';\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error('A validator is required for Form functionality to work');\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (this.props.onChange && !deepEquals(this.state.formData, this.props.formData)) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(props: FormProps<T, S, F>, inputFormData?: T): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = 'schema' in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> = ('uiSchema' in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== 'undefined';\n    const liveValidate = 'liveValidate' in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T, S, F> = state.schemaUtils;\n    if (!schemaUtils || schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(schema, inputFormData) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] = state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> = state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData({ errorSchema, errors }, props.extraErrors);\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema['ui:rootFieldId'],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(nextProps: FormProps<T, S, F>, nextState: FormState<T, S, F>): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T | undefined,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S, F>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils ? altSchemaUtils : this.state.schemaUtils;\n    const { customValidate, transformErrors, uiSchema } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(formData, resolvedSchema, customValidate, transformErrors, uiSchema);\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<'ErrorListTemplate', T, S, F>('ErrorListTemplate', registry, options);\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n          registry={registry}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (formData: T | undefined, fields: string[][]): T | undefined => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== 'object') {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(formData, fields as unknown as string[]);\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param [formData] - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData?: T): string[][] => {\n    const getAllPaths = (_obj: GenericObjectType, acc: string[][] = [], paths: string[][] = [[]]) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === 'object') {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (_obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] && _obj[key][NAME_KEY] !== '') {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== '') {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== 'object' || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n    const { extraErrors, omitExtraData, liveOmit, noValidate, liveValidate, onChange } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', formData);\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(newErrorSchema, extraErrors, 'preventDuplicates') as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(state as FormState<T, S, F>, () => onChange && onChange({ ...this.state, ...state }, id));\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(retrievedSchema, '', newFormData);\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors ? schemaUtils.getValidator().toErrorList(extraErrors) : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit({ ...this.state, formData: newFormData, status: 'submitted' }, event);\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { translateString: customTranslateString } = this.props;\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext, translateString } = getDefaultRegistry<T, S, F>();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n      translateString: customTranslateString || translateString,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent('submit', {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n   *\n   * @param error - The error on which to focus\n   */\n  focusOnError(error: RJSFValidationError) {\n    const { idPrefix = 'root', idSeparator = '_' } = this.props;\n    const { property } = error;\n    const path = _toPath(property);\n    if (path[0] === '') {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    const elementId = path.join(idSeparator);\n    let field = this.formElement.current.elements[elementId];\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(`input[id^=${elementId}`);\n    }\n    if (field) {\n      field.focus();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, focusOnFirstError, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(schemaValidation, extraErrors);\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      if (focusOnFirstError) {\n        this.focusOnError(schemaValidation.errors[0]);\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error('Form validation failed', errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = '',\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = 'top',\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || 'form';\n\n    return (\n      <FormTag\n        className={className ? className : 'rjsf'}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === 'top' && this.renderErrors(registry)}\n        <_SchemaField\n          name=''\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? children : <SubmitButton uiSchema={uiSchema} registry={registry} />}\n        {showErrorList === 'bottom' && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import { ComponentType, ForwardedRef, forwardRef } from 'react';\nimport Form, { FormProps } from './components/Form';\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from '@rjsf/utils';\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any> = Pick<\n  FormProps<T, S, F>,\n  'fields' | 'templates' | 'widgets' | '_internalFormWrapper'\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<T = any, S extends StrictRJSFSchema = RJSFSchema, F extends FormContextType = any>(\n  themeProps: ThemeProps<T, S, F>\n): ComponentType<FormProps<T, S, F>> {\n  return forwardRef(\n    ({ fields, widgets, templates, ...directProps }: FormProps<T, S, F>, ref: ForwardedRef<Form<T, S, F>>) => {\n      fields = { ...themeProps?.fields, ...fields };\n      widgets = { ...themeProps?.widgets, ...widgets };\n      templates = {\n        ...themeProps?.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","_Component","props","_this","call","this","_getNewFormDataRow","_this$props","schema","schemaUtils","registry","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","_handleAddClick","onAddIndexClick","index","onDropIndexClick","preventDefault","newErrorSchema","_this$props2","onChange","errorSchema","state","idx","i","parseInt","set","newKeyedFormData","filter","_","setState","updatedKeyedFormData","onReorderClick","newIndex","currentTarget","blur","_this$props3","_newKeyedFormData","slice","splice","onChangeForIndex","value","id","_extends2","_this$props4","_extends","onSelectChange","_this$props5","idSchema","undefined","$id","_props$formData","_inheritsLoose","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","_proto","prototype","isItemRequired","type","includes","canAddItem","formItems","_this$props6","addable","getUiOptions","uiSchema","maxItems","newKeyedFormDataRow","push","render","_this$props7","translateString","ITEMS_KEY","uiOptions","UnsupportedFieldTemplate","getTemplate","_jsx","reason","TranslatableString","MissingItems","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_this2","_this$props8","_this$props8$uiSchema","name","_this$props8$disabled","disabled","_this$props8$readonly","readonly","_this$props8$autofocu","autofocus","_this$props8$required","required","onBlur","onFocus","idPrefix","_this$props8$idSepara","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","canAdd","arrayProps","itemCast","itemErrorSchema","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","totalItems","className","Template","_this$props9","_this$props9$disabled","_this$props9$readonly","_this$props9$autofocu","_this$props9$required","hideError","placeholder","_this$props9$formData","widgets","widget","options","_objectWithoutPropertiesLoose","_getUiOptions2","_excluded","Widget","getWidget","multiple","label","_this$props10","_this$props10$formDat","_this$props10$disable","_this$props10$readonl","_this$props10$autofoc","_this$props10$require","enumOptions","optionsList","_getUiOptions3$widget","_getUiOptions3","_excluded2","_this$props11","_this$props11$disable","_this$props11$readonl","_this$props11$autofoc","_this$props11$require","_this$props11$formDat","_getUiOptions4$widget","_getUiOptions4","_excluded3","_this3","_this$props12","_this$props12$uiSchem","_this$props12$formDat","_this$props12$idSepar","_this$props12$disable","_this$props12$readonl","_this$props12$autofoc","_this$props12$require","_this$props$formData","itemSchemas","additionalSchema","concat","additional","canRemove","_props$canRemove","_props$canMoveUp","_props$canMoveDown","_this$props13","fields","ItemSchemaField","ArraySchemaField","SchemaField","_getUiOptions5$ordera","_getUiOptions5","orderable","_getUiOptions5$remova","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","jsx","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","get","_this$props14","ArrayItemTitle","Component","BooleanField","_getUiOptions$widget","_getUiOptions","yes","YesLabel","no","NoLabel","oneOf","option","o","_schema$enum","schemaWithEnumNames","enums","enumNames","every","v","enum","AnyOfField","onOptionChange","_this$state","selectedOption","retrievedOptions","intOption","newOption","newFormData","sanitizeDataForNewSchema","getFieldId","opt","getMatchingOption","componentDidUpdate","prevProps","newState","deepEquals","matchingOption","getClosestMatchingOption","optionSchema","baseType","_this$props5$disabled","_this$props5$errorSch","_SchemaField","_this$state2","autocomplete","_getUiOptions$title","ERRORS_KEY","fieldErrorSchema","omit","assign","translateEnum","TitleOptionPrefix","OptionPrefix","translateParams","String","_jsxs","default","isEmpty","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","useState","lastValue","_useState","setLastValue","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_len","arguments","args","_key","apply","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","_extends3","onDropPropertyClick","copiedFormData","unset","getAvailableKey","preferredKey","_getUiOptions$duplica","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","_newKeys","_extends4","newKeys","keyValues","_ref","renamedObj","handleAddClick","apSchema","REF_KEY","$ref","ANY_OF_KEY","ONE_OF_KEY","getDefaultValue","isRequired","indexOf","NewStringDefault","orderedProperties","_this$props5$uiSchema","_this$props5$required","_this$props5$readonly","properties","schemaProperties","_schema$properties","description","orderProperties","order","err","jsxs","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","_props$wasPropertyKey","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","UnknownFieldType","getFieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","UI_OPTIONS_KEY","help","classNames","helpComponent","hasErrors","errorsComponent","errors","fieldProps","descriptionId","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","isReplacingAnyOrOneOf","_Fragment","isSelect","shouldComponentUpdate","_props$disabled","_props$readonly","_props$autofocus","format","defaultWidget","hasWidget","_getUiOptions$placeho","NullField","useEffect","ArrayFieldDescriptionTemplate","_options$label","ArrayFieldItemTemplate","_registry$templates$B","templates","ButtonTemplates","MoveDownButton","MoveUpButton","RemoveButton","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","titleId","BaseInputTemplate","onChangeOverride","rest","console","log","Error","inputValue","inputProps","getInputProps","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","examplesId","ariaDescribedByIds","example","SubmitButton","getSubmitButtonOptions","_getSubmitButtonOptio2","_getSubmitButtonOptio","submitButtonProps","norender","submitText","IconButton","iconType","_props$iconType","icon","otherProps","DescriptionField","ErrorList","ErrorsLabel","error","stack","Label","htmlFor","WrapIfAdditionalTemplate","_props$errors","errorId","elem","helpId","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","UnsupportedFieldWithId","UnsupportedFieldWithReason","UnsupportedFieldWithIdAndReason","Markdown","keyLabel","KeyLabel","defaultValue","border","rangeOptions","start","stop","pad","dateElementProps","time","yearsRange","Date","getFullYear","data","range","year","month","day","hour","minute","second","DateElement","select","rootId","SelectWidget","AltDateWidget","_ref2$time","_ref2$disabled","_ref2$readonly","_ref2$autofocus","_useReducer","useReducer","action","parseDateString","toDateString","values","readyForChange","property","_setState","handleSetNow","nowDateObj","toJSON","handleClear","elemProps","hideNowButton","href","NowLabel","hideClearButton","ClearLabel","AltDateTimeWidget","_ref$time","CheckboxWidget","_ref$autofocus","schemaRequiresTrueValue","checked","handleBlur","handleFocus","CheckboxesWidget","_ref$options","_ref$options$inline","inline","enumDisabled","checkboxesValues","enumOptionsValueForIndex","enumOptionsIsSelected","itemDisabled","disabledCls","checkbox","optionId","enumOptionsSelectValue","enumOptionsDeselectValue","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","dataURItoBlob","blob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","all","from","then","filesInfoEvent","newValue","accept","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","selected","_ref$multiple","optEmptyVal","selectedIndexes","enumOptionsIndexForValue","TextareaWidget","_ref4","rows","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","MultiSchemaField","ErrorListTemplate","rootSchema","englishStringTranslator","defaultProps","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","_this$state3","getRegistry","_this$props$templates","customTranslateString","_getDefaultRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","focusOnError","_this$props4$idPrefix","_this$props4$idSepara","_toPath","unshift","elementId","elements","querySelector","focus","focusOnFirstError","onError","_this$props6$classNam","tagName","method","autoComplete","enctype","acceptcharset","_this$props6$noHtml5V","noHtml5Validate","_this$props6$disabled","_this$props6$readonly","_this$props6$showErro","showErrorList","_internalFormWrapper","_this$state4","encType","acceptCharset","as","ref","themeProps","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}